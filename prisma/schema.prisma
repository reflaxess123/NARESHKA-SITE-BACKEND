// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  progress  UserContentProgress[]
}

// Модели для парсинга контента из WebDAV
model ContentFile {
  id              String         @id @default(cuid())
  webdavPath      String         @unique // e.g., /obsval/FrontEnd/SBORNICK/JS/Array.md
  mainCategory    String         // JS, REACT, TS
  subCategory     String         // Array, Classes (from filename)
  lastFileHash    String?        // Hash of the entire file content
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  blocks          ContentBlock[]
}

model ContentBlock {
  id                  String                 @id @default(cuid())
  fileId              String
  file                ContentFile            @relation(fields: [fileId], references: [id], onDelete: Cascade)
  pathTitles          Json                   // ["Level 1 Title", "Level 2 Title", "Block Title"]
  blockTitle          String                 // The immediate title of this block
  blockLevel          Int                    // Markdown header level (1-4)
  orderInFile         Int                    // Order of this block within the file

  textContent         String?
  codeContent         String?
  codeLanguage        String?
  isCodeFoldable      Boolean                @default(false)
  codeFoldTitle       String?

  extractedUrls       String[]               @default([]) // Поле для извлеченных URL-ссылок
  rawBlockContentHash String?                // Hash of the raw markdown for this specific block

  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  progressEntries     UserContentProgress[]

  @@index([fileId])
}

model UserContentProgress {
  id           String        @id @default(cuid())
  userId       Int
  blockId      String
  solvedCount  Int           @default(0)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  block        ContentBlock  @relation(fields: [blockId], references: [id], onDelete: Cascade)

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([userId, blockId])
  @@index([blockId])
} 